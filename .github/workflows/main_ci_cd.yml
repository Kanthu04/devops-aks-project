name: CI/CD Pipeline to Local K8s (Simulated)

# Trigger the workflow on every push to the main branch
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    # Use the latest Ubuntu runner hosted by GitHub
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Code (Get files from GitHub)
        uses: actions/checkout@v4

      - name: 2. Set up Docker BuildX (Prerequisite for building)
        uses: docker/setup-buildx-action@v3

      # --- Simulate Registry Login/Push (Required for CI/CD flow) ---
      - name: 3. Login to Dummy Docker Registry
        uses: docker/login-action@v3
        with:
          # Uses the secrets you created (ci_cd_user, ci_cd_token)
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }} 

      - name: 4. Build Docker Image (Using Dockerfile)
        # Use the same image name/tag as your K8s deployment.yaml
        run: docker build -t static-web-app:v1 .

      - name: 5. Simulate Push (Image built successfully, ready for deploy)
        run: echo "Image built and push to local cache is simulated."
      # Replace the entire block starting with - name: 6. Build KinD Cluster, Load and Deploy with the following:

      - name: 6. Setup KinD Cluster and Load Image
        uses: helm/kind-action@v1.10.0
        with:
          # The image input must NOT be under 'config'
          image: static-web-app:v1
          
          # The config input MUST be followed by a pipe (|) and then indented 4 spaces
          config: |
            kind: Cluster
            apiVersion: kind.x-k8s.io/v1alpha4
            nodes:
            - role: control-plane

      - name: 7. Apply Kubernetes Manifests
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      - name: 8. Deployment Verification
        run: |
          echo "Waiting for pod readiness..."
          # This command waits for the deployment to confirm it reached the 'Ready' state
          kubectl rollout status deployment/static-web-deployment --timeout=90s
          kubectl get pods
          kubectl get svc