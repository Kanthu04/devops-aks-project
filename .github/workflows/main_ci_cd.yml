name: CI/CD Pipeline to Local K8s (Simulated)

# Trigger the workflow on every push to the main branch
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    # Use the latest Ubuntu runner hosted by GitHub
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Code (Get files from GitHub)
        uses: actions/checkout@v4

      - name: 2. Set up Docker BuildX (Prerequisite for building)
        uses: docker/setup-buildx-action@v3

      # --- Simulate Registry Login/Push (Required for CI/CD flow) ---
      - name: 3. Login to Dummy Docker Registry
        uses: docker/login-action@v3
        with:
          # Uses the secrets you created (ci_cd_user, ci_cd_token)
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }} 

      # - name: 4. Build Docker Image (Using Dockerfile)
      #   # Use the same image name/tag as your K8s deployment.yaml
      #   run: docker build -t static-web-app:v1 .
      # NEW Step 4: Use the reliable internal KinD tag format
      - name: 4. Build Docker Image (Using Dockerfile)
        run: docker build -t localhost:5000/static-web-app:v1 .

      - name: 5. Simulate Push (Image built successfully, ready for deploy)
        run: echo "Image built and push to local cache is simulated."
      # Replace the entire block starting with - name: 6. Build KinD Cluster, Load and Deploy with the following:

      - name: 6. Setup KinD Cluster and Load Image
        uses: helm/kind-action@v1.10.0
        with:
          # Tell KinD to use the configuration file created in Step 1
          config: kind-config.yaml
          
          # Load the image you just built
          image: static-web-app:v1

      # - name: 7. Apply Kubernetes Manifests
      #   run: |
      #     kubectl apply -f k8s/deployment.yaml
      #     kubectl apply -f k8s/service.yaml
      # NEW Step 7: Patch the deployment file before applying it
      # - name: 7. Apply Kubernetes Manifests (with updated image tag)
      #   run: |
      #     # Use sed to replace the old image name with the new localhost:5000 tag
      #     sed -i 's|image: static-web-app:v1|image: localhost:5000/static-web-app:v1|g' k8s/deployment.yaml
      #     kubectl apply -f k8s/deployment.yaml
      #     kubectl apply -f k8s/service.yaml
      # NEW Step 7: Use kubectl set image and apply service separately
      - name: 7. Apply Kubernetes Manifests (Force Local Image Pull)
        run: |
          # 1. Ensure deployment uses the correct local image tag AND force Never pull policy
          kubectl set image deployment/static-web-deployment static-web-container=localhost:5000/static-web-app:v1 --local -o yaml | kubectl apply -f -
          kubectl patch deployment static-web-deployment -p '{"spec": {"template": {"spec": {"containers": [{"name": "static-web-container", "imagePullPolicy": "Never"}]}}}}'
          
          # 2. Apply service (if it doesn't exist)
          kubectl apply -f k8s/service.yaml

      # - name: 8. Deployment Verification
      #   run: |
      #     echo "Waiting for pod readiness..."
      #     # This command waits for the deployment to confirm it reached the 'Ready' state
      #     kubectl rollout status deployment/static-web-deployment --timeout=90s
      #     kubectl get pods
      #     kubectl get svc
      # NEW Step 8: Increase timeout to 120s
      - name: 8. Deployment Verification
        run: |
          echo "Waiting for pod readiness..."
          kubectl rollout status deployment/static-web-deployment --timeout=120s # Increased timeout
          kubectl get pods
          kubectl get svc